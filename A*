import heapq

def a_star_search(graph, start, goal, heuristic, cost):
    open_list = [(heuristic[start], start)]
    came_from = {}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:  # Goal reached, reconstruct the path
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1]

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + cost[(current, neighbor)]
            if tentative_g_score < g_score.get(neighbor, float('inf')):  
                g_score[neighbor] = tentative_g_score
                heapq.heappush(open_list, (tentative_g_score + heuristic[neighbor], neighbor))
                came_from[neighbor] = current

    return None 
    
def get_input():
    n = int(input("Enter number of nodes: "))
    graph = {}
    for _ in range(n):
        node = input("Enter node name: ").strip()
        graph[node] = []

    print("Enter edges in the format: node1 node2 cost")
    cost = {}
    m = int(input("Enter number of edges: "))
    for _ in range(m):
        node1, node2, c = input().split()
        c = int(c)
        graph[node1].append(node2)
        graph[node2].append(node1)  
        cost[(node1, node2)] = c
        cost[(node2, node1)] = c  

    heuristic = {node: int(input(f"Enter heuristic for {node}: ")) for node in graph}
    start = input("Enter start node: ").strip()
    goal = input("Enter goal node: ").strip()

    return graph, heuristic, cost, start, goal

# Main function
if __name__ == "__main__":
    graph, heuristic, cost, start, goal = get_input()
    path = a_star_search(graph, start, goal, heuristic, cost)
    if path:
        print("Path found:", " -> ".join(path))
    else:
        print("No path found.")
